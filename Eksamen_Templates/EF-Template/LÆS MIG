- MODUL 5 + 6 OMHANDLER DETTE HOMIE

HUSK AT SE OM DETTE VIRKER I TERMINALEN:


- dotnet add package Microsoft.EntityFrameworkCore.SQLite
- dotnet add package Microsoft.EntityFrameworkCore.Design
- dotnet add package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore


Database kommandoer:

- dotnet ef migrations add InitialCreate
- dotnet ef database update
- dotnet run

hvis alt fejler; slet db i BIN + migrations == prøv igen == database ef migrations add "InitialCreate" --> dotnet ef database update --> dotnet run

Lidt tips og tricks:
Vær opmærksom på, at Entity Framework godt kan være lidt kræsen med hvilke constructors du har i dine model-klasser. Fx hvis du har en Task, hvor constructoren indeholder en User, kan EF godt forlange, at der også en en constructor uden User. Selv hvis User er NOT NULL.
Hvis du kommer til at oprette en migration, der ikke virker, kan den fjernes igen med dotnet ef migrations remove.
Hvis der kommer rod i data, så bare slet databasen, og kør en ny dotnet ef database update. Så kører alle migrations på igen fra start af.
Hver opmærksom på, at nye kolonner, der er NOT NULL, kan give problemer med eksisterende data. En avancerede strategi kunne her være, at opdatere data ved at rette manuelt i migration-koden se herLinks to an external site.. En simplere løsning er at gøre kolonnen nullableLinks to an external site..
Går det helt galt, så kan man slette både database og migrations, men ikke koden, og starte forfra.
Det kan være en fordel altid at tjekke “dotnet build” før man forsøger at lave en migration.
Hvis du bøvler med at den ikke henter User når du henter Task

/* Entity Framework - Modul 5 - Opgaver
Opgave 5 - Kan du svare på følgende? Test dig selv.
1. Hvordan ved Entity Framework hvilke migrations der mangler at blive kørt på? Hvor gemmes denne information?
- Entity Framework gemmer informationen om hvilke migrations der er blevet kørt i databasen. Dette gøres i tabellen __EFMigrationsHistory.

2. Hvad er formålet med filerne i folderen Migrations i dit projekt? Hvad indeholder de?
- Migrations indeholder filer, der beskriver de ændringer, der skal foretages i databasen for at opdatere den til den nyeste version.

3. Hvad styrer hvad tabellerne i databasen kommer til at hedde? Kan det ændres?
- Navnene på tabellerne i databasen styres af navnet på DbSet'et i DbContext-klassen. 
- Navnet kan ændres ved at bruge ToTable-metoden i OnModelCreating-metoden i DbContext-klassen.

4. Hvad styrer hvor databasefilen bliver oprettet? Kan det ændres? (gælder kun sqlite)
- Databasefilen bliver oprettet i den mappe, der er angivet i DbPath-property'en i DbContext-klassen.

5. Hvad sker der hvis du sletter database-filen? Hvordan får du en ny?
- Hvis du sletter databasefilen, vil en ny databasefil blive oprettet, næste gang du kører programmet.
- Dvs; en ny databasefil vil blive oprettet, hvis du i terminalen skriver dotnet run.
*/